package xmipp.jni;

public class XmippError {
   public static final int ERR_FIRST_LABEL = 0; /// 
   public static final int ERR_ARG_BADCMDLINE = 1;      /// < Errors on command line parameters.
   public static final int ERR_ARG_INCORRECT = 2;       /// < Incorrect argument received.
   public static final int ERR_ARG_MISSING = 3;         /// < Argument missing.
   public static final int ERR_ARG_DEPENDENCE = 4;      /// < Error with some arguments dependencies
   public static final int ERR_PROG_NOTDEF = 5;         /// < Required function not implemented
   public static final int ERR_DEBUG_TEST = 6;          /// < Just an error for debugging purpose.
   public static final int ERR_DEBUG_IMPOSIBLE = 7;     /// < Just for debugging, situation that can't happens
   public static final int ERR_DOCFILE = 8;             /// < Error in docfile format
   public static final int ERR_GPU_MEMORY = 9;          /// < GPU memory related issues
   public static final int ERR_GRID = 10;                /// < Grid general error.
   public static final int ERR_GRID_SIZE = 11;           /// < Incorrect number of GRID volumes or shapes
   public static final int ERR_IMG_NOREAD = 12;          /// < Cannot read image from file.
   public static final int ERR_IMG_NOWRITE = 13;         /// < Cannot write image to file.
   public static final int ERR_IMG_UNKNOWN = 14;         /// < Unknown image type
   public static final int ERR_INDEX_OUTOFBOUNDS = 15;   /// < Index out of bounds.
   public static final int ERR_IO = 16;                  /// < Input/Output general error.
   public static final int ERR_IO_NOCLOSED = 17;         /// < File cannot be closed.
   public static final int ERR_IO_NOTEXIST = 18;         /// < File or directory does not exist.
   public static final int ERR_IO_NOTOPEN = 19;          /// < File cannot be open.
   public static final int ERR_IO_NOPERM = 20;           /// < Insufficient permissions to perform operation.
   public static final int ERR_IO_NOREAD = 21;           /// < Couldn't read from file.
   public static final int ERR_IO_NOWRITE = 22;          /// < Couldn't write to file.
   public static final int ERR_IO_NOTFILE = 23;          /// < It is not a file.
   public static final int ERR_IO_NOTDIR = 24;           /// < It is not a directory.
   public static final int ERR_IO_NOPATH = 25;           /// < Environment PATH cannot be read.
   public static final int ERR_IO_LOCKED = 26;	    	 /// < Error when locking/unloking a file.
   public static final int ERR_IO_SIZE = 27;             /// < Incorrect file size.
   public static final int ERR_LOGIC_ERROR = 28;         /// < Some logical error in the pipeline
   public static final int ERR_MATRIX = 29;              /// < Matrix error.
   public static final int ERR_MATRIX_DIM = 30;          /// < Problem with matrix dimensions.
   public static final int ERR_MATRIX_EMPTY = 31;        /// < The matrix is empty.
   public static final int ERR_MATRIX_SIZE = 32;         /// < Problem with matrix size.
   public static final int ERR_MD = 33;                  /// < MetaData error.
   public static final int ERR_MD_NOACTIVE = 34;         /// < No active object in MetaData.
   public static final int ERR_MD_NOOBJ = 35;            /// < No exist requested object.
   public static final int ERR_MD_BADLABEL = 36;         /// < Unexpected label.
   public static final int ERR_MD_MISSINGLABEL = 37;     /// < Missing expected label
   public static final int ERR_MD_SQL = 38;              /// < Error in SQL of MetaData operations.
   public static final int ERR_MD_OBJECTNUMBER = 39;     /// < Incorrect number of objects in Metadata
   public static final int ERR_MD_BADTYPE = 40;          /// < Bad label type.
   public static final int ERR_MD_UNDEFINED = 41;        /// < Undefined label.
   public static final int ERR_MD_BADBLOCK  = 42;        /// < This block does not exist.
   public static final int ERR_MEM_BADREQUEST = 43;      /// < Bad amount of memory requested.
   public static final int ERR_MEM_NOTENOUGH = 44;       /// < There is not enough memory for allocation.
   public static final int ERR_MEM_NOTDEALLOC = 45;      /// < Memory has not been deallocated.
   public static final int ERR_MEM_NULLPOINTER = 46;     /// < Null pointer passed as parameter
   public static final int ERR_MMAP = 47;                /// < Global mmap error.
   public static final int ERR_MMAP_NOTADDR = 48;        /// < Map addressing of file has failed.
   public static final int ERR_MULTIDIM_DIM = 49;        /// < Incorrect MultidimArray dimensions
   public static final int ERR_MULTIDIM_SIZE = 50;       /// < Incorrect MultidimArray size
   public static final int ERR_MULTIDIM_EMPTY = 51;      /// < MultidimArray is empty.
   public static final int ERR_NOT_IMPLEMENTED = 52;     /// < Case or algorithm not implemented yet.
   public static final int ERR_NUMERICAL = 53;           /// < Error related to numerical calculation.
   public static final int ERR_PARAM_INCORRECT = 54;     /// < Parameter incorrect.
   public static final int ERR_PARAM_MISSING = 55;       /// < Parameter missing.
   public static final int ERR_PLANS_NOCREATE = 56;      /// < FFT Plan cannot be created.
   public static final int ERR_SELFILE = 57;             /// < Error in docfile format
   public static final int ERR_THREADS_NOTINIT = 58;     /// < Threads cannot be initiated.
   public static final int ERR_TYPE_INCORRECT = 59;      /// < Incorrect type received.
   public static final int ERR_UNCLASSIFIED = 60;        /// < Just to locate unclassified errors.
   public static final int ERR_VALUE_EMPTY = 61;         /// < Empty value.
   public static final int ERR_VALUE_INCORRECT = 62;     /// < Incorrect value received.
   public static final int ERR_VALUE_NOTSET = 63;         /// < Value has not been set.
   public static final int ERR_LAST_LABEL = 64; /// 
}
